@page "/fetchmail"
@using Scan2Go.Entity.IdsAndDocuments
@using Newtonsoft.Json
@inject HttpClient Http

<PageTitle>Reading mail from outlook and progressing attachments</PageTitle>

<h1>Data of scanned documents</h1>

<p>This component demonstrates fetching mail data from the outlook and show progress data from Regula API responses.</p>

@if (IdentityCards.Any() == false)
{
    <p><em>Waiting response from mail fetching...</em></p>
}
else
{
    <div class="identity-cards">
        @foreach (var card in IdentityCards)
        {
            <div class="identity-card">
                <div class="portrait">
                    @if (!string.IsNullOrWhiteSpace(card.PortraitImage))
                    {
                        <img src="data:image/jpeg;base64,@card.PortraitImage" alt="Portrait Image" />
                    }
                    else
                    {
                        <p>No image available</p>
                    }
                </div>
                <div class="details">
                    <p><strong>Name:</strong> @card.Name @card.Surname</p>
                    <p><strong>Document Number:</strong> @card.DocumentNumber</p>
                    <p><strong>Personal Number:</strong> @card.PersonalNumber</p>
                    <p><strong>Scanned Document Type:</strong> @card.ScannedDocumentTypeName</p>
                </div>
            </div>
        }
    </div>
}

<style>
    .identity-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .identity-card {
        border: 1px solid #ccc;
        padding: 10px;
        display: flex;
        flex-direction: column;
        max-width: 300px;
    }

    .portrait img {
        max-width: 100%;
        height: auto;
    }

    .details {
        margin-top: 10px;
    }
</style>


@code {
    private IList<IdentityCard> IdentityCards = new List<IdentityCard>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:44387/Monitoring/GetMails");

            if (response.IsSuccessStatusCode)
            {
                var jsonResponseString = await response.Content.ReadAsStringAsync();
                dynamic jsonResponseDynamic = JsonConvert.DeserializeObject<dynamic>(jsonResponseString);

                IdentityCards = jsonResponseDynamic.resultObject.ToObject<List<IdentityCard>>();
            }
            else
            {
                Console.WriteLine("Failed to load list: ");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
