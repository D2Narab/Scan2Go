@page "/edituser"

@using Scan2Go.Mapper.Models.UserModels
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Text;

@inject NavigationManager NavigationManager
@inject HttpClient Http

<style>
    /* Custom modal styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050;
    }

    .modal-content {
        padding: 20px;
    }
</style>


@if (_showModal)
{
    <!-- Modal Dialog -->
    <div class="modal-dialog" role="dialog" style="display: block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (_user == null)
                {
                    <!-- Modal Backdrop -->
                    <div class="modal-backdrop show"></div>

                    <!-- Modal Dialog -->
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <p><em>Loading...</em></p>
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <!-- Display user details and input fields for editing -->
                        <label for="userName">User Name:</label>
                        <input type="text" id="userName" @bind="_user.UserName" />

                        <label for="userSurname">User Surname:</label>
                        <input type="text" id="userSurname" @bind="_user.UserSurname" />

                        <label for="isActive">Is Active:</label>
                        <input type="checkbox" id="isActive" @bind="_user.IsActive" />

                        <button @onclick="SaveUser">Save</button>
                    </div>
                }
            </div>
        </div>
    </div>
}



@code {
    private UsersModel _user;
    private bool _showModal = false;


    // Method to set the user details from the parent component
    public Task SetUser(UsersModel usersModel)
    {
        _user = usersModel;
        _showModal = true;

        StateHasChanged(); // Notify the component to re-render
        return Task.CompletedTask;
    }

    private async Task SaveUser()
    {
        // Call the API to save the user details
        var jsonString = JsonSerializer.Serialize(_user);
        var content = new StringContent(jsonString, Encoding.UTF8, "application/json");

        try
        {
            var response = await Http.PutAsync($"https://localhost:44387/Users/SaveUser", content);

            if (response.IsSuccessStatusCode)
            {
                CloseModal();
            }
            else
            {
                // Handle save failure, e.g., show an error message
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void CloseModal()
    {
        //NavigationManager.NavigateTo("/Users");
        _user = null; // Clear the user data
        _showModal = false; // Hide the modal

        StateHasChanged();
    }
}
