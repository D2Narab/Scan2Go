@page "/edituser"

@using Scan2Go.Mapper.Models.UserModels
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Text;

@inject NavigationManager NavigationManager
@inject HttpClient Http

<!-- Updated CSS -->
<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-dialog {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 400px;
        width: 90%;
        text-align: center;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .modal-title {
        font-size: 24px;
        font-weight: bold;
    }

    .close {
        cursor: pointer;
    }

    .modal-body {
        text-align: left;
    }

    label {
        font-weight: bold;
    }

    input[type="text"],
    input[type="checkbox"] {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        padding: 8px 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #0056b3;
        }
</style>


@if (_showModal)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (_user == null)
                    {
                        <div class="loading">Loading...</div>
                    }
                    else
                    {
                        <div>
                            <label for="userName">User Name:</label>
                            <input type="text" id="userName" @bind="_user.UserName" />

                            <label for="userSurname">User Surname:</label>
                            <input type="text" id="userSurname" @bind="_user.UserSurname" />

                            <label for="isActive">Is Active:</label>
                            <input type="checkbox" id="isActive" @bind="_user.IsActive" />

                            <button @onclick="SaveUser">Save</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Parameter] public EventCallback OnUserSaved { get; set; }
    private UsersModel _user;
    private bool _showModal = false;


    // Method to set the user details from the parent component
    public Task SetUser(UsersModel usersModel)
    {
        _user = usersModel;
        _showModal = true;

        StateHasChanged(); // Notify the component to re-render
        return Task.CompletedTask;
    }

    private async Task SaveUser()
    {
        // Call the API to save the user details
        var jsonString = JsonSerializer.Serialize(_user);
        var content = new StringContent(jsonString, Encoding.UTF8, "application/json");

        try
        {
            var response = await Http.PutAsync($"https://localhost:44387/Users/SaveUser", content);

            if (response.IsSuccessStatusCode)
            {
                // Call the parent's callback method to notify that the user is saved
                await OnUserSaved.InvokeAsync();
                CloseModal();
            }
            else
            {
                // Handle save failure, e.g., show an error message
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void CloseModal()
    {
        //NavigationManager.NavigateTo("/Users");
        _user = null; // Clear the user data
        _showModal = false; // Hide the modal

        StateHasChanged();
    }
}
